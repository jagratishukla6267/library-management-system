import streamlit as st
from datetime import datetime, timedelta

class LibraryManagementSystem:
    def _init_(self):
        self.users = []
        self.books = []
        self.transactions = []
        self.admin_access = {"Maintenance": True, "Reports": True, "Transactions": True}
        self.user_access = {"Maintenance": False, "Reports": True, "Transactions": True}

    def login(self, username, password):
        for user in self.users:
            if user['username'] == username and user['password'] == password:
                return user['role']
        return None

    def add_book(self, title, author, category="Book"):
        if not title or not author:
            return "Error: All fields are mandatory."
        book = {
            "title": title,
            "author": author,
            "category": category,
            "available": True,
            "issued_to": None,
            "issue_date": None,
            "return_date": None,
        }
        self.books.append(book)
        return f"Book '{title}' added successfully."

    def search_books(self, title=None, author=None):
        results = [book for book in self.books if (title in book['title'] or not title) and (author in book['author'] or not author)]
        return results

    def issue_book(self, title, username):
        for book in self.books:
            if book['title'] == title and book['available']:
                book['available'] = False
                book['issued_to'] = username
                book['issue_date'] = datetime.now()
                book['return_date'] = datetime.now() + timedelta(days=15)
                return f"Book '{title}' issued to {username}."
        return "Error: Book not available."

    def return_book(self, title, username):
        for book in self.books:
            if book['title'] == title and book['issued_to'] == username:
                book['available'] = True
                book['issued_to'] = None
                book['issue_date'] = None
                book['return_date'] = None
                return f"Book '{title}' returned successfully."
        return "Error: Book not found or not issued to this user."

    def calculate_fine(self, title, username):
        for book in self.books:
            if book['title'] == title and book['issued_to'] == username:
                if book['return_date'] < datetime.now():
                    overdue_days = (datetime.now() - book['return_date']).days
                    fine = overdue_days * 5  # Assuming fine is $5 per day
                    return fine
        return 0

    def pay_fine(self, title, username):
        fine = self.calculate_fine(title, username)
        if fine > 0:
            return f"Fine of ${fine} paid for '{title}'."
        return "No fine to pay."

    def add_user(self, username, password, role="User"):
        if not username or not password:
            return "Error: Username and password are mandatory."
        user = {
            "username": username,
            "password": password,
            "role": role,
        }
        self.users.append(user)
        return f"User '{username}' added successfully."

# Streamlit UI
if _name_ == "_main_":
    system = LibraryManagementSystem()

    st.title("Library Management System")

    menu = ["Login", "Add Book", "Search Books", "Issue Book", "Return Book", "Pay Fine", "Add User"]
    choice = st.sidebar.selectbox("Menu", menu)

    if choice == "Login":
        st.subheader("Login")
        username = st.text_input("Username")
        password = st.text_input("Password", type="password")
        if st.button("Login"):
            role = system.login(username, password)
            if role:
                st.success(f"Logged in as {role}")
            else:
                st.error("Invalid username or password")

    elif choice == "Add Book":
        st.subheader("Add Book")
        title = st.text_input("Book Title")
        author = st.text_input("Author")
        category = st.selectbox("Category", ["Book", "Movie"])
        if st.button("Add Book"):
            result = system.add_book(title, author, category)
            st.success(result)

    elif choice == "Search Books":
        st.subheader("Search Books")
        title = st.text_input("Search by Title")
        author = st.text_input("Search by Author")
        if st.button("Search"):
            results = system.search_books(title, author)
            if results:
                for book in results:
                    st.write(book)
            else:
                st.error("No books found")

    elif choice == "Issue Book":
        st.subheader("Issue Book")
        title = st.text_input("Book Title")
        username = st.text_input("Username")
        if st.button("Issue Book"):
            result = system.issue_book(title, username)
            st.success(result)

    elif choice == "Return Book":
        st.subheader("Return Book")
        title = st.text_input("Book Title")
        username = st.text_input("Username")
        if st.button("Return Book"):
            result = system.return_book(title, username)
            st.success(result)

    elif choice == "Pay Fine":
        st.subheader("Pay Fine")
        title = st.text_input("Book Title")
        username = st.text_input("Username")
        if st.button("Calculate Fine"):
            fine = system.calculate_fine(title, username)
            st.write(f"Fine Amount: ${fine}")
        if st.button("Pay Fine"):
            result = system.pay_fine(title, username)
            st.success(result)

    elif choice == "Add User":
        st.subheader("Add User")
        username = st.text_input("Username")
        password = st.text_input("Password", type="password")
        role = st.selectbox("Role", ["User", "Admin"])
        if st.button("Add User"):
            result = system.add_user(username, password, role)
            st.success(result)
