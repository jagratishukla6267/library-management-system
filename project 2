import streamlit as st
import mysql.connector
from datetime import datetime, timedelta

# Database Connection
def connect_db():
    return mysql.connector.connect(
        host="localhost",
        user="root",
        password="your_password",
        database="library_db"
    )

def init_db():
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id INT AUTO_INCREMENT PRIMARY KEY,
            username VARCHAR(255) UNIQUE NOT NULL,
            password VARCHAR(255) NOT NULL,
            role VARCHAR(50) NOT NULL
        )
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS books (
            id INT AUTO_INCREMENT PRIMARY KEY,
            title VARCHAR(255) NOT NULL,
            author VARCHAR(255) NOT NULL,
            category VARCHAR(50) NOT NULL,
            available BOOLEAN DEFAULT TRUE
        )
    """)
    conn.commit()
    conn.close()

def add_user(username, password, role):
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute("INSERT INTO users (username, password, role) VALUES (%s, %s, %s)", (username, password, role))
    conn.commit()
    conn.close()
    return "User added successfully."

def login(username, password):
    conn = connect_db()
    cursor = conn.cursor(dictionary=True)
    cursor.execute("SELECT * FROM users WHERE username=%s AND password=%s", (username, password))
    user = cursor.fetchone()
    conn.close()
    return user

def add_book(title, author, category):
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute("INSERT INTO books (title, author, category) VALUES (%s, %s, %s)", (title, author, category))
    conn.commit()
    conn.close()
    return f"Book '{title}' added successfully."

def search_books(title):
    conn = connect_db()
    cursor = conn.cursor(dictionary=True)
    cursor.execute("SELECT * FROM books WHERE title LIKE %s", ("%" + title + "%",))
    books = cursor.fetchall()
    conn.close()
    return books

init_db()

# Streamlit UI
st.title("Library Management System")
menu = ["Login", "Add Book", "Search Books", "Add User"]
choice = st.sidebar.selectbox("Menu", menu)

if choice == "Login":
    st.subheader("Login")
    username = st.text_input("Username")
    password = st.text_input("Password", type="password")
    if st.button("Login"):
        user = login(username, password)
        if user:
            st.success(f"Logged in as {user['role']}")
        else:
            st.error("Invalid username or password")

elif choice == "Add Book":
    st.subheader("Add Book")
    title = st.text_input("Book Title")
    author = st.text_input("Author")
    category = st.selectbox("Category", ["Book", "Movie"])
    if st.button("Add Book"):
        result = add_book(title, author, category)
        st.success(result)

elif choice == "Search Books":
    st.subheader("Search Books")
    title = st.text_input("Search by Title")
    if st.button("Search"):
        results = search_books(title)
        if results:
            for book in results:
                st.write(book)
        else:
            st.error("No books found")

elif choice == "Add User":
    st.subheader("Add User")
    username = st.text_input("Username")
    password = st.text_input("Password", type="password")
    role = st.selectbox("Role", ["User", "Admin"])
    if st.button("Add User"):
        result = add_user(username, password, role)
        st.success(result)
